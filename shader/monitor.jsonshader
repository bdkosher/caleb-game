{"uniforms": [ "u_cameraView",
					"u_normalCameraView",
					"u_modelView",
					"u_normalModelView",
					"u_projection",
					"u_diffuseMap",
					"u_displayMap",
					"u_displayImageMap",
					"u_specularMap",
					"u_lightDirection",
					"u_lightColor",
					"u_ambientLightColor",
					"u_time",
					"u_levelShadowMap",
					"u_levelSize"				
					],
	"attributes": ["a_position", "a_normal", "a_texCoords"],
	"vertexShader": "
		#ifdef GL_ES
		precision highp float;
		#endif
	
		attribute vec3 a_position;
		attribute vec3 a_normal;
		attribute vec2 a_texCoords;
	
		uniform mat4 u_cameraView;
		uniform mat4 u_modelView;
		uniform mat4 u_projection;
		uniform mat4 u_normalCameraView;		
		uniform mat4 u_normalModelView;

		uniform sampler2D u_diffuseMap;
	
		varying vec2 v_texCoords;
		varying vec3 v_normal;
		varying vec4 v_globalPosition;
		varying vec4 v_localPosition;
	
		void main(void) {
			v_texCoords = a_texCoords;
			v_normal = (u_normalCameraView * (u_normalModelView * vec4(a_normal, 0.0))).xyz;
			v_globalPosition = u_modelView * vec4(a_position, 1.0);
			v_localPosition = u_cameraView * v_globalPosition;
			gl_Position = u_projection * v_localPosition;
		}	
	",
	"fragmentShader": "
		#ifdef GL_ES
		precision highp float;
		#endif

		varying vec3 v_normal;
		varying vec4 v_globalPosition;
		varying vec4 v_localPosition;
		varying vec2 v_texCoords;
		
		uniform sampler2D u_diffuseMap;
		uniform sampler2D u_specularMap;
		uniform sampler2D u_displayMap;
		uniform sampler2D u_displayImageMap;
		uniform sampler2D u_levelShadowMap;
		uniform vec3 u_levelSize;		
		uniform vec3 u_lightDirection;
		uniform vec4 u_lightColor;
		uniform vec4 u_ambientLightColor;
		uniform vec3 u_playerPosition;
		uniform mat4 u_cameraView;
		uniform mat4 u_modelView;
		uniform mat4 u_normalCameraView;		
		uniform float u_time;

		void main(void) {
			vec3 normal = normalize(v_normal);
			float product = dot(normal, (u_normalCameraView * vec4(u_lightDirection, 0.0)).xyz);
			float shadowSourceHeight = texture2D(u_levelShadowMap, vec2((v_globalPosition.x)/ u_levelSize.x, (v_globalPosition.z) / u_levelSize.z)).r;
			float shadowCoefficient = max(0.0,min(1.0,(v_globalPosition.y - shadowSourceHeight * u_levelSize.y) / 20.0 + 1.0));
			product *= shadowCoefficient;
			gl_FragColor = u_ambientLightColor + u_lightColor * max(0.0, product);
			gl_FragColor *= texture2D(u_diffuseMap, v_texCoords);
//			gl_FragColor = vec4(0.0,0.0,0.0,1.0);
			float dotp = dot(reflect((u_normalCameraView * vec4(u_lightDirection,0.0)).xyz, (vec4(-normal,0.0)).xyz), (vec4(0.0, 0.0, -1.0, 0.0)).xyz);
			gl_FragColor += pow(max(0.0, dotp), 100.0 * texture2D(u_specularMap, v_texCoords).r) * texture2D(u_specularMap, v_texCoords) * 10.0 * shadowCoefficient;
			vec4 imgPosition = texture2D(u_displayMap, v_texCoords);
			float interf = (cos(imgPosition.g + u_time * 2.0) - 29.0/30.0) * 30.0;			
			vec4 imgColor = imgPosition.b * texture2D(u_displayImageMap, imgPosition.rg + vec2((1.0 - max(0.0,interf)) + sin(u_time / 2.0) * cos(u_time * 12.0 + imgPosition.g * 20.0) / 40.0 + sin(u_time / 2.0) / 32.0, sin(u_time / 2.0) / 16.0));
			if (interf > 0.0) {
				float gray = (imgColor.r + imgColor.g + imgColor.b) / 3.0;
				imgColor = vec4(gray,gray,gray, 1.0) * (2.0 - interf);
			}
			gl_FragColor += imgColor;
//			gl_FragColor += texture2D(u_diffuseMap, (normal.xy + 1.0) / 2.0) * pow(length(normal.xy), 10.0);
			//gl_FragColor = vec4(v_worldPosition.y / 256.0, 1.0, 1.0, 1.0);
//			gl_FragColor += pow(length(normal.xy), 22.0) * vec4(1.0,1.0,1.0,1.0) * (1.0) * gl_FragColor;
			gl_FragColor = vec4(gl_FragColor.rgb, 1.0);
		}
	"
}